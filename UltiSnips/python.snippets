# Hello World: hello {{{1
snippet hello "Basic hello world" b
#!/usr/bin/env python
# encoding: utf-8

def main():
    print("Hello from %s" % __file__)

if __name__ == '__main__':
    main()
endsnippet


# SQL Alchemy filters{{{1
#
# Thanks to...
# http://manuelmax.tumblr.com/post/289720781/common-filter-operators-sqlalchemy

snippet sqla_hello "SQL Alchemy Hello World" b
import time
import sqlite3
 
 
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, DateTime, create_engine
from sqlalchemy.orm import scoped_session, sessionmaker
 
Base = declarative_base()
session = scoped_session(sessionmaker())
 
 
class User(Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True)
    name = Column(String(255))
 
    deleted = Column(Integer, nullable=False, default=0)
    modified = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    created = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
 
def init_db(dbname='mysql://www:www@localhost/test'):
    engine = create_engine(dbname, echo=False)
    session.remove()
    session.configure(bind=engine, autoflush=False, expire_on_commit=False)
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)
    return engine
 
 
def test_sqlalchemy_orm(number_of_records=100000):
    init_db()
    start = time.time()
    for i in range(number_of_records):
        user = User()
        user.name = 'NAME ' + str(i)
        session.add(user)
    session.commit()
    end = time.time()
    print "SQLAlchemy ORM: Insert {0} records in {1} seconds".format(
        str(number_of_records), str(end - start)
    )
 
 
def test_sqlalchemy_core(number_of_records=100000):
    engine = init_db()
    start = time.time()
    engine.execute(
        User.__table__.insert(),
        [{"name": "NAME " + str(i)} for i in range(number_of_records)]
    )
    end = time.time()
    print "SQLAlchemy Core: Insert {0} records in {1} seconds".format(
        str(number_of_records), str(end - start)
    )
 
def test_get(top=10):
    query = session.query(User)
    query.limit(top)

    for user in query:
        print "Hello from %s" % user.name


 
if __name__ == "__main__":
    test_sqlalchemy_core(10)
    test_sqlalchemy_orm(10)
    test_get();
endsnippet

snippet sqla_class "Basic sqla class" b
class ${1:customer}(Base):
    __tablename__ = '$1s'

    $1_id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=False, server_default=text("''"))
    description = Column(String(128), nullable=False, server_default=text("''"))

    deleted = Column(Integer, nullable=False, server_default=text("'0'"))
    modified = Column(DateTime, nullable=False, server_default=text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"))
    created = Column(DateTime, nullable=False, server_default=text("CURRENT_TIMESTAMP"))

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return '<$1 %r>' % self.name
endsnippet

snippet sqla_parent_child "Hello world example for SQL Alchemy" b
class ${1:customer}(Base):
    __tablename__ = '$1s'

    $1_id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=False)
    status = Column(String(32), primary_key=True)
    description = Column(String(128), nullable=False)

    deleted = Column(Integer, nullable=False, default=0)
    modified = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    created = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())

    # Children with back reference
    $2 = relationship("$2s", backref="$1")

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return '<$1 %r>' % self.name

class ${2:user}(Base):
    __tablename__ = '$2s'

    $2_id = Column(Integer, primary_key=True)
    $1_id = Column(Integer, ForeignKey('$1.$1_id'))
    name = Column(String(255), nullable=False, server_default=text("''"))

    deleted = Column(Integer, nullable=False, default=0)
    modified = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())
    created = Column(DateTime, nullable=False, default=datetime.now(), onupdate=datetime.now())

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return '<$2 %r>' % self.name
endsnippet

snippet sqla_ref_child "Child back reference"
    # Children with back reference
    ${1:child} = relationship("$1", backref="${2:parent}")
endsnippet

snippet sqla_ref_parent "Parent reference, make sure to backref as well" b
    ${1:parent}_id = Column(Integer, ForeignKey('$1.$1_id'))
endsnippet

snippet sqla_eq "Filter: Equals"
query.filter(${1:User.name} == '$2')
endsnippet

snippet sqla_neq "Filter: Equals"
query.filter(${1:User.name} != '$2')
endsnippet

snippet sqla_like "Filter: Like" 
query.filter(${1:User.name}.like('%${2:search}%'))
endsnippet

snippet sqla_in "Filter: In"
query.filter(${1:User.name}.in_(${2:['ed', 'wendy', 'jack']}))
endsnippet

snippet sqla_nin "Filter: In"
query.filter(${1:User.name}.in_(${2:['ed', 'wendy', 'jack']}))
endsnippet

snippet sqla_null "Filter: Is null" 
filter(${1:User.name} == None)
endsnippet

snippet sqla_nnull "Filter: Is not null" 
filter(${1:User.name} != None)
endsnippet

snippet sqla_and "Filter: And"
from sqlalchemy import and_
filter(and_(${1:User.name} == '${2:ed}', ${3:User.fullname} == '${4:Ed Jones}'))
endsnippet

snippet sqla_or "Filter: Or"
from sqlalchemy import or_
filter(or_(${1:User.name} == '${2:ed}', ${3:User.name} == '${4:wendy}'))
endsnippet

snippet sqla_match "Filter: Match"
query.filter(${1:User.name}.match('${2:wendy}'))
endsnippet

snippet sqla_limit "Get top x"
query.limit($1)
endsnippet


# Test case boiler plate: test_case {{{1
snippet test_case "Basic test case" b
class Test_$1(TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_${1/.*/\L$0\E/g}(self):
        self.fail()

endsnippet

# INFO: For following Sections {{{1
# The following is sourced from http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html#example-numpy



# Module Level: module  {{{1
snippet module "Module"
# -*- coding: utf-8 -*-
"""Example Google style docstrings.

This module demonstrates documentation as specified by the \`Google Python
Style Guide\`_. Docstrings may extend over multiple lines. Sections are created
with a section header and a colon followed by a block of indented text.

Example:
    Examples can be given using either the \`\`Example\`\` or \`\`Examples\`\`
    sections. Sections support any reStructuredText formatting, including
    literal blocks::

        $ python example_google.py

Section breaks are created by resuming unindented text. Section breaks
are also implicitly created anytime a new section starts.

Attributes:
    module_level_variable1 (int): Module level variables may be documented in
        either the \`\`Attributes\`\` section of the module docstring, or in an
        inline docstring immediately following the variable.

        Either form is acceptable, but the two should not be mixed. Choose
        one convention to document module level variables and be consistent
        with it.

Todo:
    * For module TODOs
    * You have to also use \`\`sphinx.ext.todo\`\` extension

.. _Google Python Style Guide:
   http://google.github.io/styleguide/pyguide.html

"""
endsnippet

# Module level variable: modulevar {{{1
snippet modulevar "Module level variable docstring" b
# myvar = 123
"""int: Module level variable documented inline.

The docstring may span multiple lines. The type may optionally be specified
on the first line, separated by a colon.
"""
endsnippet

# Function: def, deftyped (typed functions), defmodule (module level functions) {{{1
snippet def "Function docstring" b
def function_with_types_in_docstring(param1, param2):
	    """Example function with types documented in the docstring.

    \`PEP 484\`_ type annotations are supported. If attribute, parameter, and
    return types are annotated according to \`PEP 484\`_, they do not need to be
    included in the docstring:

    Args:
        param1 (int): The first parameter.
        param2 (str): The second parameter.

    Returns:
        bool: The return value. True for success, False otherwise.

    .. _PEP 484:
        https://www.python.org/dev/peps/pep-0484/

    """
endsnippet

snippet defftyped "Function with type annotation" b
def function_with_types_in_docstring(param1, param2):
    """Example function with types documented in the docstring.

    \`PEP 484\`_ type annotations are supported. If attribute, parameter, and
    return types are annotated according to \`PEP 484\`_, they do not need to be
    included in the docstring:

    Args:
        param1 (int): The first parameter.
        param2 (str): The second parameter.

    Returns:
        bool: The return value. True for success, False otherwise.

    .. _PEP 484:
        https://www.python.org/dev/peps/pep-0484/

    """
endsnippet

snippet defmodule "Module level function" b
def module_level_function(param1, param2=None, *args, **kwargs):
    """This is an example of a module level function.

    Function parameters should be documented in the \`\`Args\`\` section. The name
    of each parameter is required. The type and description of each parameter
    is optional, but should be included if not obvious.

    If \*args or \*\*kwargs are accepted,
    they should be listed as \`\`*args\`\` and \`\`**kwargs\`\`.

    The format for a parameter is::

        name (type): description
            The description may span multiple lines. Following
            lines should be indented. The "(type)" is optional.

            Multiple paragraphs are supported in parameter
            descriptions.

    Args:
        param1 (int): The first parameter.
        param2 (:obj:\`str\`, optional): The second parameter. Defaults to None.
            Second line of description should be indented.
        *args: Variable length argument list.
        **kwargs: Arbitrary keyword arguments.

    Returns:
        bool: True if successful, False otherwise.

        The return type is optional and may be specified at the beginning of
        the \`\`Returns\`\` section followed by a colon.

        The \`\`Returns\`\` section may span multiple lines and paragraphs.
        Following lines should be indented to match the first line.

        The \`\`Returns\`\` section supports any reStructuredText formatting,
        including literal blocks::

            {
                'param1': param1,
                'param2': param2
            }

    Raises:
        AttributeError: The \`\`Raises\`\` section is a list of all exceptions
            that are relevant to the interface.
        ValueError: If \`param2\` is equal to \`param1\`.

    """
    if param1 == param2:
        raise ValueError('param1 may not be equal to param2')
    return True
endsnippet

# Generator: defgen {{{1
snippet defgen "Generator" b
def example_generator(n):
    """Generators have a \`\`Yields\`\` section instead of a \`\`Returns\`\` section.

    Args:
        n (int): The upper limit of the range to generate, from 0 to \`n\` - 1.

    Yields:
        int: The next number in the range of 0 to \`n\` - 1.

    Examples:
        Examples should be written in doctest format, and should illustrate how
        to use the function.

        >>> print([i for i in example_generator(4)])
        [0, 1, 2, 3]

    """
    for i in range(n):
        yield i
endsnippet

# Errpr: error {{{1
snippet error "Error" b
class ExampleError(Exception):
    """Exceptions are documented in the same way as classes.

    The __init__ method may be documented in either the class level
    docstring, or as a docstring on the __init__ method itself.

    Either form is acceptable, but the two should not be mixed. Choose one
    convention to document the __init__ method and be consistent with it.

    Note:
        Do not include the \`self\` parameter in the \`\`Args\`\` section.

    Args:
        msg (str): Human readable string describing the exception.
        code (:obj:\`int\`, optional): Error code.

    Attributes:
        msg (str): Human readable string describing the exception.
        code (int): Exception error code.

    """

    def __init__(self, msg, code):
        self.msg = msg
        self.code = code
endsnippet

# Class: class {{{1
snippet class "Class" b
class ExampleClass(object):
    """The summary line for a class docstring should fit on one line.

    If the class has public attributes, they may be documented here
    in an \`\`Attributes\`\` section and follow the same formatting as a
    function's \`\`Args\`\` section. Alternatively, attributes may be documented
    inline with the attribute's declaration (see __init__ method below).

    Properties created with the \`\`@property\`\` decorator should be documented
    in the property's getter method.

    Attributes:
        attr1 (str): Description of \`attr1\`.
        attr2 (:obj:\`int\`, optional): Description of \`attr2\`.

    """

    def __init__(self, param1, param2, param3):
        """Example of docstring on the __init__ method.

        The __init__ method may be documented in either the class level
        docstring, or as a docstring on the __init__ method itself.

        Either form is acceptable, but the two should not be mixed. Choose one
        convention to document the __init__ method and be consistent with it.

        Note:
            Do not include the \`self\` parameter in the \`\`Args\`\` section.

        Args:
            param1 (str): Description of \`param1\`.
            param2 (:obj:\`int\`, optional): Description of \`param2\`. Multiple
                lines are supported.
            param3 (:obj:\`list\` of :obj:\`str\`): Description of \`param3\`.

        """
        self.attr1 = param1
        self.attr2 = param2
        self.attr3 = param3  #: Doc comment *inline* with attribute

        #: list of str: Doc comment *before* attribute, with type specified
        self.attr4 = ['attr4']

        self.attr5 = None
        """str: Docstring *after* attribute, with type specified."""

endsnippet

# Properties: property {{{1
snippet property "Property" b
@property
def readonly_property(self):
    """str: Properties should be documented in their getter method."""
    return 'readonly_property'

@property
def readwrite_property(self):
    """:obj:\`list\` of :obj:\`str\`: Properties with both a getter and setter
    should only be documented in their getter method.

    If the setter method contains notable behavior, it should be
    mentioned here.
    """
    return ['readwrite_property']

@readwrite_property.setter
def readwrite_property(self, value):
    value
endsnippet


# Special and hidden variables _special, _private  {{{1
snippet _special "Special and private class members" b
def __special__(self):
    """By default special members with docstrings are not included.

    Special members are any methods or attributes that start with and
    end with a double underscore. Any special member with a docstring
    will be included in the output, if
    \`\`napoleon_include_special_with_doc\`\` is set to True.

    This behavior can be enabled by changing the following setting in
    Sphinx's conf.py::

        napoleon_include_special_with_doc = True

    """
    pass

def __special_without_docstring__(self):
    pass

endsnippet

snippet _private "Description" b
def _private(self):
    """By default private members are not included.

    Private members are any methods or attributes that start with an
    underscore and are *not* special. By default they are not included
    in the output.

    This behavior can be changed such that private members *are* included
    by changing the following setting in Sphinx's conf.py::

        napoleon_include_private_with_doc = True

    """
    pass

  def _private_without_docstring(self):
      pass
endsnippet


# INFO: Spinx snippets {{{1

snippet #link "Link snippet"
\`${1:Python}${2: <http://www.python.org/>}\`_
endsnippet

snippet #link_to_class "Link to class document" b
:class:\`~module.cls\`
endsnippet

snippet #link_to_function "Link to function document" b
:fun:\\`~module.class.fun\\`
endsnippet

snippet #code "Code" b
This is a simple example::

    import math
    print 'import done'
endsnippet

snippet #code_include "Include code from file" b
.. literalinclude:: ${1:filename}
    :linenos:
    :language: python
    :lines: 1, 3-5
    :start-after: 3
    :end-before: 5
endsnippet

snippet #toc "Include rst from file" b
User's Guide
------------

This part of the documentation, which is mostly prose, begins with some
background information about simplerr, then focuses on step-by-step
instructions for web development with simplerr.

.. toctree::
    :maxdepth: 2
    :numbered:
    :titlesonly:
    :glob:
    :hidden:

    intro.rst
    chapter1.rst
    chapter2.rst

.. toctree::
   :maxdepth: 2

API Reference
-------------

.. toctree::
   :maxdepth: 2

   api.rst

Additional Notes
----------------

Design notes, legal information and changelog are here for the interested.

.. toctree::
   :maxdepth: 2

   design
   htmlfaq
   security
   unicode
   extensiondev
   styleguide
   upgrading
   changelog
   license
   contributing
endsnippet

snippet #image "Image" b
.. image:: stars.jpg
    :width: 200px
    :align: center
    :height: 100px
    :alt: alternate text
endsnippet

snippet #figure "Figure" b
.. figure:: stars.jpg
    :width: 200px
    :align: center
    :height: 100px
    :alt: alternate text
    :figclass: align-center

    figure are like images but with a caption

    and whatever else youwish to add

    .. code-block:: python

        import image
endsnippet

snippet #box_seealso "See also box" b
.. seealso:: This is a simple **seealso** note.
endsnippet

snippet #box_note "Note box" b
.. note::  This is a **note** box.
endsnippet

snippet #box_ "Warning box" b
.. warning:: note the space between the directive and the text
endsnippet

snippet #gloassary "Glossary" b
.. glossary::
     apical
        at the top of the plant.
endsnippet

snippet #cite "Citation" b
.. [CIT2002] A citation
          (as often used in journals, use as follows [CIT2002]_ ).
endsnippet

snippet #substitution "Description" b
simplerr depends on the \`Jinja\`_ template engine and the \`Werkzeug\`_ WSGI
toolkit. The documentation for these libraries can be found at:

- \`Jinja documentation <http://jinja.pocoo.org/docs>\`_
- \`Werkzeug documentation <http://werkzeug.pocoo.org/docs>\`_

.. _Jinja: https://www.palletsprojects.com/p/jinja/
.. _Werkzeug: https://www.palletsprojects.com/p/werkzeug/
endsnippet

snippet #heading1 "Heading (section)" b
==================================================
endsnippet

snippet #heading2 "Sub-headering (sub section)" b
--------------------------------------------------
endsnippet

snippet #heading3 "Sub-Sub-Heading (sub-sub-section)" b
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
endsnippet

