snippet fold
	//====================| ${0}                                |=================={{{1

snippet fold2
	//--------------------| ${0}                                |------------------{{{2

snippet log
	const __ = (...log) => console.log('ðŸ‘‰ ðŸ‘‰ ', ...log)


# Athena Force {{{1
snippet athena_entiity "Athena force entity"
	const { BaseEntity } = require('@athenamortgages/athena-force')

	class ${1:Entity} extends BaseEntity {
	  constructor (options) {
		super({ ...options, entity: '$1__c, plural: '$1'' })
	  }
	}

module.exports = Payee

# Jest													{{{1

snippet jest_describe "jest test structure"
	describe('as a user i want to...${0}', () => {
		beforeAll(() => {
		  /* Runs before all tests */
		})
		afterAll(() => {
		  /* Runs after all tests */
		})
		beforeEach(() => {
		  /* Runs before each test */
		})
		afterEach(() => {
		  /* Runs after each test */
		})
		
		test('make each pony pink', () => {
		  const actual = fn(['Alice', 'Bob', 'Eve'])
		  expect(actual).toEqual(['Pink Alice', 'Pink Bob', 'Pink Eve'])
		})
	})

snippet jest_is_tobe "strict equality ==="
	it( 'does ${1:1+1} equals ${2:2}', () => {
		expect( $1 ).toBe( $2 )
	})${0}

snippet jest_is_equal "checks the equality of properties or elements"
	it( 'does ${1:1+1} equals ${2:2}', () => {
		expect( $1 ).toEqual( $2 )
	})${0}

snippet jest_is_null "true when null value"
	it( 'does ${1:null} is null', () => {
		expect( $1 ).toBeNull()
	})${0}

snippet jest_is_defined "true when defined"
	it( 'does ${1:abc} exist', () => {
		expect( $1 ).toBeDefined()
	})${0}

snippet jest_is_undefined "true when undefined"
	it( 'does ${1:abc} not exist', () => {
		expect( $1 ).toBeUndefined()
	})${0}

snippet jest_is_truthy "true if would pass if statement"
	it( 'does ${1:true} make truthy statement', () => {
		expect( $1 ).toBeTruthy()
	})${0}

snippet jest_is_falsey "true if would fail if statement"
	it( 'does ${1:false} make falsy statement', () => {
		expect( $1 ).toBeFalsy()
	})${0}

snippet jest_is_closeto "true if foat is close to"
	it( 'does ${1:1.001} roughly equal ${2:1}', () => {
		expect( $1 ).toBeCloseTo( $2 )
	})${0}


snippet jest_is_greater "greater than"
	it( 'does equate to ${1:1+1} > ${2:2}', () => {
		expect( $1 ).toBeGreaterThan( $2 )
	})${0}

snippet jest_is_greaterequal "greater than or equal"
	it( 'does equate to ${1:1+1} > ${2:2}', () => {
		expect( $1 ).toBeGreaterThanOrEqual( $2 )
	})${0}


snippet jest_is_less "less than"
	it( 'does equate to ${1:1+1} < ${2:2}', () => {
		expect( $1 ).toBeLessThan( $2 )
	})${0}

snippet jest_is_less_equal "less than or equal"
	it( 'does equate to ${1:1+1} < ${2:2}', () => {
		expect( $1 ).toBeLessThanOrEqual( $2 )
	})${0}

snippet jest_is_regex "regex match"
	it( 'does ${1:/cat/} match ${2:"cat in the hat"}', () => {
		expect( $1 ).toMatch( $2 )
	})${0}


snippet jest_is_in_array "array contains elemnent from set"
	it( 'does ${1:["cat", "dog"]} contain any [${2:"cat", "bird"}]', () => {
		expect( $1 ).toContain( $2 )
	})${0}

snippet jest_is_in_string "array contains elemnent from set"
	it( 'does ${1:"cat"} contain any [${2:"at", "rd"}]', () => {
		expect( $1 ).toContain( $2 )
	})${0}


snippet jest_have_length "checks the length of an array"
	it( 'does ${1:[1,2,3]} have ${2:3} items', () => {
		expect( $1 ).toHaveLength( $2 )
	})${0}

snippet jest_have_property "checks the property in object"
	it( 'does ${1:abc} have ${2:def} with value ${3:123}', () => {
		expect( $1 ).toHaveProperty( $2, $3 )
	})${0}


snippet jest_throws "checks the fn for exceptions"
	it( 'does ${1:fn(null)} throw error ${2:/abc/}', () => {
		expect( $1 ).toThrow( $2 )
	})${0}

snippet jest_is_instance_of "checks the instance type"
	it( 'does ${1:abc} match instance of ${2:Object|Class|Function}', () => {
		expect( $1 ).toBeInstanceOf( $2 )
	})${0}

snippet jest_spy "spy on module"
	// Spy on the module: ${1:mymodule} and function ${2:log}
	const $1 = require('$1')

	it('does $1 $2 function checks', () => {
	  const spy = jest.spyOn($1, '$2')
	  const result = $1.log(10000, 10)
	
	  expect($1.$2).toHaveBeenCalled()
	  expect($1.$2).toHaveBeenCalledWith(10000, 10)
	})

snippet jest_mock "mock a module"
	// Mock on the module: ${1:mymodule} and function ${2:log}
	const $1 = require('$1')
	
	$1.$2 = jest.fn(() => 'test')
	test('The $1 $2 function', () => {
	  const result = $1.$2(10000, 10)
	  expect(result).toBe('test')
	  expect($1.$2).toHaveBeenCalled()
	  expect($1.$2).toHaveBeenCalledWith(10000, 10)
	})

# ReactJs												{{{1

snippet     rjs_comp_class
abbr        rjcc
	class ${1:componentName} extends Component {
		
	  constructor(props) {
		super(props)
		this.state = {};
	  }
	
	  render() {
		return (
		  <div>
			${0}
		  </div>
		);
	  }
	}
	export default $1


snippet rjs_generic_change
	handleChange = (event) => {
		// Usage <input type="text" name="email" onChange={this.handleChange} value={this.state.email} />
		this.setState({[event.target.name]: event.target.value })
	}

# React Redux													{{{1
snippet rdx_create_store
	import { createStore, combineReducers } from 'redux'
	const rootReducer = combineReducers({reducer1, reducer2})
    const initialState = {}
	const store = createStore ( rootReducer, initialState )
	console.log( store.getState() )
		
	

snippet rdx_component
	import React, { Component } from 'react';
	import { connect } from 'react-redux';
	import {bindActionCreators} from "redux";

	import {action1, action2} from "myActions";

	class ${1:componentName} extends Component {
		
	  constructor(props) {
		super(props)
		this.state = {};
	  }
	
	  render({counter, someComponentValue, firstAction, secondAction}) {
		return (
		  <div>
			<div>Counter: {counter}</div>
			<div>Other: {someComponentValue}</div>
			<button onClick={firstAction}>First Button</button>
			<button onClick={seconfAction}>Second Button</button>

			${0}
		  </div>
		);
	  }
	}

	const mapStateToProps = (state, ownProps) => ({
	  someitem: state.counter,
	  someComponentValue: state.things[ownProps.someIdProp],
	});

	const mapDispatchToProps = (dispatch) => ({
	  firstAction: () => dispatch(action1()),
	  secondAction: bindActionCreators(action1, dispatch),
	});

	export default connect(mapStateToProps, mapDispatchToProps)($1);

snippet rdx_map_state_to_props
	const mapStateToProps= state => ({
			${0}
		  });

snippet rdx_map_dispatch_to_props
	const mapDispatchToProps = (dispatch) => ({
        ${0}
      });

snippet rdx_action_const
	export const ${1:constName} = '$1';

snippet rdx_action_creator
	export const ${1:actionName} = (action) => ({
		type: type,
		payload: action.payload
	});

snippet rdx_reducer
	export default (state = { }, action) => {
	  switch (action.type) {
		  case typeName:
			return { ...state }
		  default:
			return state
		  }
	}

snippet rdx_saga
	export function* ${1:workerName}Saga() {

    }

snippet rdx_fetch_promise
	fetchData = (url) => (dispatch) => {
	  dispatch({ type: 'FETCH_REQUEST' })
	  fetch(url)
		.then((data) => dispatch({ type: 'FETCH_DONE', data })
		.catch((error) => dispatch({ type: 'FETCH_ERROR', error })
	})

	// Manual dispatch
	store.dispatch(fetchData('/posts'))
	// That's actually shorthand for:
	fetchData('/posts')(store.dispatch)

snippet rdx_provilder_app
	import { Provider } from 'react-redux'
	React.render(
	  <Provider store={store}>
		<App />
	  </Provider>, mountNode)


snippet rdx_middleware

	// Middleware signature
	const logger = store => dispatch => action { dispatch(action) }
	const logger = store => {
	  // This function runs on createStore().
	  // It returns a decorator for dispatch().

	  return dispatch => {
		// Runs on createStore(), too.
		// It returns a new dispatch() function

		return action => {
		  // Runs on every dispatch()
		}
	  }
	}

	// Apply Middleware
	const enhancer = applyMiddleware(logger, thunk, ...)
	const store = createStore(reducer, {}, enhancer)


# vim: set ts=4 sw=4 tw=0 fdm=marker noet :
