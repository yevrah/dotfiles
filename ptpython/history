
# 2018-04-04 11:00:16.240900
+print('hello'.format(__file__))

# 2018-04-04 11:03:32.624969
+print('Hello {}'.format(__file__))

# 2018-04-04 11:03:40.409454
+exit

# 2018-04-04 11:04:59.453328
+print('Hello {}'.format(__file__))

# 2018-04-04 11:05:25.309977
+print('hello'.format(__file__))
+print('Hello {}'.format(__file__))
+
+print('Hello {}'.format(__file__))

# 2018-04-04 11:05:52.411187
+from website.common.models.broker import *

# 2018-04-04 11:08:06.381639
+from common.models.broker import *

# 2018-04-04 11:08:40.709679
+broker = Brokers.create(name=abc)

# 2018-04-04 11:08:44.633301
+broker = Brokers.create(name='abc')

# 2018-04-04 11:11:27.175411
+v

# 2018-04-04 11:16:01.190268
+print('hello {}'.format(__file__))
+
+def hello(msg):
+    print('hello {}'.format(__file__))
+    return True

# 2018-04-04 11:16:14.962518
+hello('abc')

# 2018-04-04 11:16:53.282773
+def hello(msg=''):
+    """Takes a message and prints it"""
+    print("Echo: {}".format(msg))

# 2018-04-04 11:17:09.048413
+hello()

# 2018-04-04 11:17:15.440392
+hello('some message')

# 2018-04-04 13:44:06.797043
+from common.models import *

# 2018-04-04 13:46:03.926214
+Branches.get(Branches.branch == 362 )

# 2018-04-04 13:46:14.124472
+BrokersBranches.get(Branches.branch == 362 )

# 2018-04-04 13:46:22.818197
+BrokersBranches.get(BrokersBranches.branch == 362 )

# 2018-04-04 13:46:41.025992
+branch = BrokersBranches.get(BrokersBranches.branch == 362 )

# 2018-04-04 13:46:45.576772
+branch.brokers

# 2018-04-04 13:47:08.001034
+for broker in branch.brokers:
+    print(broker.name)

# 2018-04-04 13:47:45.198552
+broker.group.name

# 2018-04-04 13:48:03.926170
+branch.groupe.name

# 2018-04-04 13:48:07.654253
+branch.group.name

# 2018-04-04 13:51:10.764354
+branch._meta

# 2018-04-04 13:51:22.448284
+branch._meta.fields

# 2018-04-04 13:54:01.871968
+Accounts.scenarios = True/False

# 2018-04-04 13:54:17.166301
+# Accounts.scenarios = True/False

# 2018-04-04 14:09:00.604681
+v

# 2018-04-04 14:12:02.668777
+import config

# 2018-04-04 14:12:04.964574
+config

# 2018-04-04 14:12:15.268853
+repl

# 2018-04-04 14:12:27.724435
+PythonRepl

# 2018-04-04 14:15:27.332977
+def hello(msg):
+    print(msg)

# 2018-04-04 14:15:34.996080
+hello('Tom')

# 2018-04-04 14:17:45.991609
+def hello(msh):
+    pass

# 2018-04-04 14:18:18.421672
+def hello(msg):
+    return "Some variation"

# 2018-04-04 14:18:39.381112
+def hello(msh):
+    return "123"

# 2018-04-04 14:20:19.945460
+def abc(msg):
+    return "123"

# 2018-04-04 14:21:11.775614
+def abc(msh):
+    return "abcde"

# 2018-04-04 14:21:58.677920
+def abc(msg=""):
+    return msg.upper()

# 2018-04-05 16:12:31.081808
+def mynameis(john):
+    print(john)

# 2018-04-23 14:04:34.694401
+import myModule

# 2018-05-07 14:09:35.037943
+uuid1 = "03FCE2EA432A4FF4A6E5A55692FE1293"

# 2018-05-07 14:09:42.312196
+uuid2 = "5092nkzmqeoxxzly5axiropy4xwvdrjg"

# 2018-05-07 14:09:49.368272
+len(uuid1)

# 2018-05-07 14:09:52.544182
+len(uuid2)

# 2018-05-15 16:20:38.083409
+hash('abc')

# 2018-05-15 16:20:42.334941
+hash('abc', 'def')

# 2018-05-15 16:20:45.993556
+hash('abc' + 'def')

# 2018-05-15 16:21:16.192133
+a1 = [1,2,3,4]

# 2018-05-15 16:21:21.392347
+str(a1)

# 2018-05-15 16:24:37.041271
+haslib.md5('abc')

# 2018-05-15 16:24:42.263573
+hashlib.md5('abc')

# 2018-05-15 16:24:46.463678
+import hashlib

# 2018-05-15 16:25:07.296711
+hashlib.md5('abc')

# 2018-05-15 16:25:12.047235
+hashlib.md5(b'abc')

# 2018-05-15 16:25:46.614566
+hashlib.md5(u'abc')

# 2018-05-15 16:26:12.853925
+hashlib.md5(b'abc').digest().encode('base64')

# 2018-05-15 16:26:28.612471
+hashlib.md5(b'abc').digest()

# 2018-05-15 16:26:33.573159
+hashlib.md5(b'abc').digest().encode()

# 2018-05-15 16:27:10.244819
+str(hashlib.md5(b'abc').digest().encode())

# 2018-05-15 16:27:15.826615
+str(hashlib.md5(b'abc').digest())

# 2018-05-15 16:28:35.836872
+hashlib.md5(b'abc').hexdigest()

# 2018-05-15 16:29:00.851619
+hashlib.md5('abc'.encode('utf-8')).hexdigest()

# 2018-05-15 16:29:26.363003
+hashlib.md5('abcdef'.encode('utf-8')).hexdigest()

# 2018-05-15 16:29:39.904876
+hashlib.md5('abcdef'.encode('utf-8')).hexdigest().encode('base64')

# 2018-05-15 16:30:12.868621
+hash = hashlib.md5('abcdef'.encode('utf-8')).hexdigest().encode('base64')

# 2018-05-15 16:30:17.715260
+hash = hashlib.md5('abcdef'.encode('utf-8')).hexdigest()

# 2018-05-15 16:30:19.314962
+hash

# 2018-05-15 16:30:32.954626
+import base64

# 2018-05-15 16:30:39.476086
+base64.encode(hash)

# 2018-05-15 16:31:26.606774
+base64.encode(hash.encode('utf-8'))

# 2018-05-15 16:32:32.667559
+help(base64)

# 2018-05-15 16:32:42.641571
+base64.urlsafe_b64encode('abc')

# 2018-05-15 16:32:48.125550
+base64.urlsafe_b64encode(b'abc')

# 2018-05-15 16:33:01.333357
+base64.urlsafe_b64encode('abc'.encode('utf-8'))

# 2018-05-15 16:33:11.334231
+base64.urlsafe_b64encode('abc'.encode(hash))

# 2018-05-15 16:33:13.940608
+hash

# 2018-05-15 16:33:31.044023
+base64.urlsafe_b64encode(hash.encode('utf-8'))

# 2018-05-15 16:33:56.242480
+base64.urlsafe_b64encode(hash)

# 2018-05-15 16:34:20.772154
+base64.b64encode(hash)

# 2018-05-15 16:34:48.178045
+base64.encodestring('abc')

# 2018-05-15 16:34:59.821797
+base64.encodestring(b'abc')

# 2018-05-15 16:35:06.672595
+base64.encodestring(b'abcdef')

# 2018-05-15 16:37:06.977604
+hs = hashlib.md5('abcdef'.encode('utf-8')).digest()

# 2018-05-15 16:37:08.283452
+hs

# 2018-05-15 16:38:37.040784
+has

# 2018-05-15 16:38:38.503868
+hash

# 2018-05-15 16:38:43.999703
+len(hash)

# 2018-05-15 16:40:00.773465
+help(md5)

# 2018-05-15 16:40:20.583942
+help(hashlib.md5)

# 2018-05-15 16:41:24.982814
+help(hashlib)

# 2018-05-15 16:44:45.126520
+"""
+unsigned int DJBHash(const char* str, unsigned int length)
+{
+   unsigned int hash = 5381;
+   unsigned int i    = 0;
+
+   for (i = 0; i < length; ++str, ++i)
+   {
+      hash = ((hash << 5) + hash) + (*str);
+   }
+
+   return hash;
+}
+"""

# 2018-05-17 16:50:55.583653
+num = 2343

# 2018-05-17 16:51:02.337395
+num << 10

# 2018-05-17 16:51:09.783105
+num << 5

# 2018-05-17 16:51:16.550764
+num << 10

# 2018-05-17 16:52:17.916163
+1 << 31

# 2018-05-17 16:52:23.676078
+1 << 64

# 2018-05-17 16:52:27.891959
+1 << 65

# 2018-05-17 16:52:46.857938
+2 << 1

# 2018-05-17 16:52:49.731291
+4 << 1

# 2018-05-17 16:52:58.458821
+4 >> 1

# 2018-05-17 16:53:03.746508
+1 >> 1

# 2018-05-17 16:53:06.842364
+0 >> 1

# 2018-05-17 16:53:32.817430
+a =10

# 2018-05-17 16:53:34.913424
+b =20

# 2018-05-17 16:53:40.521046
+a ^= b

# 2018-05-17 16:53:41.550259
+a

# 2018-05-17 16:53:44.577268
+b

# 2018-05-17 16:57:05.423373
+10 >> 1

# 2018-05-17 16:57:11.497133
+5 >> 1

# 2018-05-17 16:57:13.994958
+2 >> 1

# 2018-05-17 16:57:18.512192
+1 >> 1

# 2018-05-22 15:20:46.612484
+class myclass(object): pass

# 2018-05-22 15:20:56.237136
+print(myclass)

# 2018-05-22 15:21:42.643070
+mc = myclass

# 2018-05-22 15:21:46.356102
+mc()

# 2018-05-22 15:30:12.096084
+exit

# 2018-05-22 15:43:22.721994
+mylist = [x for x in range(10,20)]

# 2018-05-22 15:43:27.080282
+mylist

# 2018-05-22 15:43:33.161866
+mylist = [x for x in range(10,21)]

# 2018-05-22 15:43:34.538922
+mylist

# 2018-05-22 15:43:52.656899
+mylist = [x*82 for x in range(10,21)]

# 2018-05-22 15:44:00.503963
+mylist = [x**2 for x in range(10,21)]

# 2018-05-22 15:44:03.224675
+mylist

# 2018-05-22 15:44:09.352391
+mylist = [x**2 for x in range(1,21)]

# 2018-05-22 15:44:11.808381
+mylist

# 2018-05-22 15:44:31.052496
+mylist = [x^2 for x in range(1,21)]

# 2018-05-22 15:44:34.152451
+mylist

# 2018-05-22 15:45:02.558590
+mylist = [x**2 for x in range(1,21)]

# 2018-05-22 15:45:11.006971
+mylist

# 2018-05-22 15:45:33.619673
+mylist2 = [x for x in range(1,21)]

# 2018-05-22 15:45:39.590134
+mylist2

# 2018-05-22 15:46:00.268264
+mylist = [(x*2)**2 for x in range(1,21)]

# 2018-05-22 15:46:02.637147
+mylist

# 2018-05-22 15:46:53.096308
+mylist = [x**2 for x in range(10)]

# 2018-05-22 15:46:54.963264
+mylist

# 2018-05-22 15:47:11.768948
+mylist2 = [x for x in range(10)]

# 2018-05-22 15:47:13.912488
+mylist2

# 2018-05-22 15:48:18.645508
+mylist3 = [i for i in mylist if i%2 == 0]

# 2018-05-22 15:48:21.525293
+mylist3

# 2018-05-22 15:50:54.520187
+mympa = map(lambda x: x*2, mylist)

# 2018-05-22 15:50:57.234210
+mumpa

# 2018-05-22 15:50:59.655578
+mylist

# 2018-05-22 15:51:03.232542
+mympa

# 2018-05-22 15:51:14.071828
+list(mympa)

# 2018-05-22 15:51:57.220889
+def runme(x):
+    return x+10

# 2018-05-22 15:52:24.396961
+mymap2 = map( runme, mylist)

# 2018-05-22 15:52:29.324656
+list(mymap2)

# 2018-05-22 15:52:35.259391
+mylist

# 2018-05-22 15:53:46.250152
+even = filter(lambda x: x%2 == 0, mylist)

# 2018-05-22 15:53:47.848201
+even

# 2018-05-22 15:53:52.424735
+list(even)

# 2018-05-22 15:54:09.984974
+oddn = filter(lambda x: x%2, mylist)

# 2018-05-22 15:54:15.232830
+list(oddn)

# 2018-05-22 15:55:17.725629
+sum(mylist)

# 2018-05-22 15:56:05.195604
+min(mylist)

# 2018-05-22 15:56:09.083269
+max(mylist)

# 2018-05-22 15:56:45.635447
+all(mylist)

# 2018-05-22 15:57:01.529172
+any(mylist)

# 2018-05-22 15:57:42.520425
+std(mylist)

# 2018-05-22 16:00:41.818088
+mylistmap = [(x, x**2) for x in range(10)]

# 2018-05-22 16:00:45.842955
+mylistmap

# 2018-05-22 16:02:15.973180
+mydict = {'a': 10, 'b':20}

# 2018-05-22 16:02:20.013152
+mydict.items()

# 2018-05-22 16:02:30.173062
+list(mydict.items())

# 2018-05-31 15:19:47.397625
+import random

# 2018-05-31 15:19:56.572840
+item = [1,2,3]

# 2018-05-31 15:20:19.495072
+randome.randrange(0, len(item),1)

# 2018-05-31 15:20:26.175437
+random.randrange(0, len(item),1)

# 2018-05-31 15:20:43.259211
+item[2]

# 2018-06-15 14:39:32.736774
+main_list = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]

# 2018-06-15 14:39:41.289043
+main_list[0]

# 2018-06-15 14:40:25.211919
+dict = {}

# 2018-06-15 14:40:37.419866
+dict[(1,2)] = '123'

# 2018-06-15 14:40:40.196200
+dict

# 2018-06-15 14:40:49.251488
+dict[(1,2)]

# 2018-06-15 14:42:37.983613
+newd = {(i[0], i[1]) : i for i in main_list}

# 2018-06-15 14:42:39.463906
+newd

# 2018-06-15 14:43:02.396895
+main_list = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]

# 2018-06-15 14:43:07.301799
+newd = {(i[0], i[1]) : i for i in main_list}

# 2018-06-15 14:43:25.655100
+newd[(0,1)]

# 2018-06-15 14:44:06.116229
+newd.get( (0,1) )

# 2018-06-15 14:44:12.627840
+newd.get( (4,5) )

# 2018-06-15 14:44:24.844061
+newd.get( (5,5) )

# 2018-06-15 14:44:36.210465
+b = newd.get( (5,5) )

# 2018-06-15 14:44:37.282344
+b

# 2018-06-15 14:49:21.956120
+index_list

# 2018-06-15 14:49:25.767564
+newd

# 2018-06-15 14:52:17.673506
+main_list = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]

# 2018-06-15 14:53:01.095828
+main_list = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [0,1,4,4]]

# 2018-06-15 14:53:08.238911
+newd = {(i[0], i[1]) : i for i in main_list }

# 2018-06-15 14:53:09.943581
+newd

# 2018-06-15 14:53:50.980344
+t()

# 2018-07-19 09:52:40.634487
+import chess.pgn

# 2018-07-19 09:53:32.666904
+exit

# 2018-07-19 09:54:03.111368
+import chess

# 2018-07-19 10:00:59.121000
+import chess.pgn

# 2018-07-19 10:01:38.084786
+pgn = open('db/lichess_db_standard_rated_2018-06.pgn')

# 2018-07-19 10:01:59.603781
+first = chess.pgn.read_game(pgn)

# 2018-07-19 10:02:02.198981
+first

# 2018-07-19 10:02:13.708565
+first.headers

# 2018-07-19 10:03:46.281609
+import csv

# 2018-07-19 10:08:04.077275
+with open('summary.csv', 'w') as f:
+    fieldnames = ['Event', 'Date', 'ELO', 'Opening', 'Termination', 'Time Control']
+    writer = csv.DictWriter(f, fieldnames=fieldnames)

# 2018-07-19 10:15:39.126975
+with open('summary.csv', 'w') as f:
+    fieldnames = ['Event', 'Date', 'ELO', 'Opening', 'Termination', 'Time Control']
+    writer = csv.DictWriter(f, fieldnames=fieldnames)
+    writer.writeheader()
+    writer.writerow({
+        'Event': first.headers['Event'],
+        'Date': first.headers['Date'],
+        'ELO':first.headers['BlackElo'],
+        'Opening': first.headers['Opening'],
+        'Termination': first.headers['Termination'],
+        'Time Control': first.headers['TimeControl']
+    })

# 2018-07-19 10:19:20.511049
+with open('summary.csv', 'w') as f:
+    fieldnames = ['Event', 'Date', 'ELO', 'Opening', 'Termination', 'Time Control']
+    writer = csv.DictWriter(f, fieldnames=fieldnames)
+    writer.writeheader()
+    
+    while first:
+        writer.writerow({
+            'Event': first.headers['Event'],
+            'Date': first.headers['Date'],
+            'ELO':first.headers['BlackElo'],
+            'Opening': first.headers['Opening'],
+            'Termination': first.headers['Termination'],
+            'Time Control': first.headers['TimeControl']
+        })
+        first = chess.pgn.read_game(pgn)

# 2018-07-19 10:32:19.375664
+with open('summary.csv', 'w') as f:
+    fieldnames = ['Event', 'Date', 'ELO', 'Opening', 'Termination', 'Time Control']
+    writer = csv.DictWriter(f, fieldnames=fieldnames)
+    writer.writeheader()
+    
+    while first:
+        writer.writerow({
+            'Event': first.headers['Event'],
+            'Date': first.headers['Date'],
+            'ELO':first.headers['BlackElo'],
+            'Opening': first.headers['Opening'],
+            'Termination': first.headers['Termination'],
+            'Time Control': first.headers['TimeControl']
+        })
+        first = chess.pgn.read_game(pgn)
+        print(first.headers['Opening'])

# 2018-07-19 10:32:21.144645
+first

# 2018-07-19 10:32:26.849447
+first.headers

# 2018-07-20 09:20:56.016079
+import chess.pgn

# 2018-07-20 09:21:16.786182
+game = open('pgn-samples/polgar.pgn')

# 2018-07-20 09:21:18.741050
+game

# 2018-07-20 09:22:47.302531
+game.tell

# 2018-07-20 09:22:50.110548
+game.tell()

# 2018-07-20 09:23:25.724599
+data = chess.pgn.read_game(game)

# 2018-07-20 09:23:28.693025
+game.tell()

# 2018-07-20 09:24:28.328684
+import os

# 2018-07-20 09:24:57.120396
+os.path.getsize("pgn-samples/polgar.pgn")

# 2018-07-20 16:47:28.346880
+import pandas as pd

# 2018-07-20 16:49:52.224343
+data = pd.read_csv('summary-1000.csv')

# 2018-07-20 16:49:59.843027
+data

# 2018-07-20 16:50:37.688187
+df.head(5)

# 2018-07-20 16:50:43.912119
+data.head(5)

# 2018-07-20 16:51:40.341633
+data['id']

# 2018-07-20 16:51:48.763687
+data['id'].dtypes

# 2018-07-20 16:51:58.164759
+data.head(5)

# 2018-07-20 16:52:13.921142
+data['Date'].dttypes

# 2018-07-20 16:52:17.525778
+data['Date'].dtypes

# 2018-07-20 16:52:34.691910
+data['Event'].dtypes

# 2018-07-21 13:16:25.888062
+exit

# 2018-07-24 15:38:05.668283
+1+2

# 2018-07-24 15:38:13.208106
+2**3

# 2018-07-24 15:38:16.512319
+2**4

# 2018-07-24 15:38:33.414864
+for i in range(10):
+    2**i

# 2018-07-24 15:38:40.832193
+for i in range(10):
+    print(2**i)

# 2018-07-24 15:38:50.999370
+for i in range(20):
+    print(2**i)

# 2018-07-24 15:40:07.500688
+for i in range(20):
+    print("{:,}".format(2**i))

# 2018-07-24 15:40:25.075116
+exec("1+2")

# 2018-07-24 15:40:29.251052
+exec("a=10")

# 2018-07-24 15:40:30.633438
+a

# 2018-07-24 15:40:41.107578
+sys.path

# 2018-08-03 16:32:57.696966
+import dropbox

# 2018-08-03 16:35:21.178846
+dbx = dropbox.Dropbox('eUoL80gptB0AAAAAAAAB2ygvKhlrXukXX1yDBCrQff52MrRRTx_HPYPM_Kz_Ubpt')

# 2018-08-03 16:35:24.281891
+dbx

# 2018-08-03 16:35:38.865243
+dbx.users_get_current_account()

# 2018-08-03 16:36:16.904849
+for entry in dbx.files_list_folder('').entries:
+    print(entry.name)

# 2018-08-03 16:37:36.437432
+dbx.files_upload("test.txt", 'hello.txt')

# 2018-08-03 16:38:43.154814
+dbx.files_upload("test.txt", '/Users/harvey/dev/dropbox-integration.com/hello.txt')

# 2018-08-03 16:39:31.753555
+dbx.files_upload('/Users/harvey/dev/dropbox-integration.com/hello.txt')

# 2018-08-03 16:40:32.709813
+dbx.files_upload('hello.txt', 'hello.txt')

# 2018-08-03 16:40:58.541029
+dbx.files_upload('hello.txt', '/hello.txt')

# 2018-08-03 16:41:09.700654
+dbx.files_upload('hello', '/hello.txt')

# 2018-08-03 16:41:16.212897
+dbx.files_upload(b'hello', '/hello.txt')

# 2018-08-03 16:42:37.449555
+dbx.files_upload(b'hello', '/finalised/hello.txt')

# 2018-08-09 09:09:13.770878
+import random, string

# 2018-08-09 09:10:09.104072
+"".join([random.choice(string.ascii_letters + string.digits) for i in range(8)])

# 2018-08-09 09:10:12.976313
+"".join([random.choice(string.ascii_letters + string.digits) for i in range(30)])

# 2018-08-09 09:10:53.723120
+ch= "█"
+def col(sz):
+    mn,mx=min(sz),max(sz)
+    df = (mx-mn)//8
+    bkt = [(el-mn)//df for el in sz]
+    hrz = [f"{b}{c}" for b,c in
+            [(ch*(el+1)," "*(8-el))  for el in bkt]
+        ]
+    return "\n".join([" ".join(el) for el in list(map(list, zip(*hrz)))[::-1]])

# 2018-08-09 09:11:02.726593
+series = [random.randint(10, 99) for _ in range(25)]

# 2018-08-09 09:11:08.381665
+print(col(series))

# 2018-08-09 09:13:38.115162
+top

# 2018-08-09 09:16:59.455736
+cler

# 2018-08-09 09:17:01.129230
+clear

# 2018-08-09 13:20:22.758204
+def hello(msg: str) -> str:
+    return msg + '-iam-a-string'

# 2018-08-09 13:20:32.664069
+hello("one")

# 2018-08-14 09:58:39.863538
+from mailmerge import MailMerge

# 2018-08-14 09:59:10.908810
+exit

# 2018-08-14 10:01:30.959707
+from mailmerge import MailMerge

# 2018-08-14 10:02:20.168662
+template = 'test-01.docx'

# 2018-08-14 10:02:33.663296
+document = MailMerge(template)

# 2018-08-14 10:02:41.548327
+document.get_merge_fields()

# 2018-08-14 10:03:20.700117
+document.merge(business='Hello Kitty')

# 2018-08-14 10:04:22.781311
+document.write('test-01-output.docx')

# 2018-08-14 10:07:41.998291
+document = MailMerge(template)

# 2018-08-14 10:07:44.492694
+document.merge(business='Hello Kitty')

# 2018-08-14 10:07:48.572402
+document.get_merge_fields()

# 2018-08-14 10:08:33.332259
+document = MailMerge(template)

# 2018-08-14 10:08:35.155020
+document.get_merge_fields()

# 2018-08-14 10:10:27.341209
+document.merge(business='Hello Kitty')

# 2018-08-14 10:14:02.716267
+document.merge_rows('fname', [{'fname':'John', 'sname':'Doe', 'phone':123}, {'fname':'Jane', 'sname':'Doeson', 'phone':345}])

# 2018-08-14 10:14:20.790183
+document.merge_rows('fname', [{'fname':'John', 'sname':'Doe', 'phone':'123'}, {'fname':'Jane', 'sname':'Doeson', 'phone':'345'}])

# 2018-08-14 10:14:32.839891
+document.write('test-01-output-02.docx')

# 2018-08-14 10:15:55.241646
+names= [{'fname':'John', 'sname':'Doe', 'phone':'123'}, {'fname':'Jane', 'sname':'Doeson', 'phone':'345'}]

# 2018-08-14 10:16:00.122784
+document = MailMerge(template)

# 2018-08-14 10:16:48.495272
+document.merge(business='Test Business 01')

# 2018-08-14 10:17:09.255831
+document.merge_rows('fname', names)

# 2018-08-14 10:17:16.241999
+document.write('test-01-output-03.docx')

# 2018-08-14 11:37:08.781659
+document = MailMerge(template)

# 2018-08-14 11:37:20.223126
+document.get_merge_fields()

# 2018-08-14 11:37:28.847389
+document = MailMerge(template)

# 2018-08-14 11:37:30.149425
+document.get_merge_fields()

# 2018-08-14 15:09:51.094892
+def hello():
+    return "hi"

# 2018-08-20 17:10:41.402996
+a=b

# 2018-08-20 17:10:44.741728
+a=10

# 2018-08-20 17:10:47.579170
+a*82

# 2018-08-20 17:10:50.709201
+a**2

# 2018-09-06 11:31:24.825296
+ls
