
# 2018-04-04 11:00:16.240900
+print('hello'.format(__file__))

# 2018-04-04 11:03:32.624969
+print('Hello {}'.format(__file__))

# 2018-04-04 11:03:40.409454
+exit

# 2018-04-04 11:04:59.453328
+print('Hello {}'.format(__file__))

# 2018-04-04 11:05:25.309977
+print('hello'.format(__file__))
+print('Hello {}'.format(__file__))
+
+print('Hello {}'.format(__file__))

# 2018-04-04 11:05:52.411187
+from website.common.models.broker import *

# 2018-04-04 11:08:06.381639
+from common.models.broker import *

# 2018-04-04 11:08:40.709679
+broker = Brokers.create(name=abc)

# 2018-04-04 11:08:44.633301
+broker = Brokers.create(name='abc')

# 2018-04-04 11:11:27.175411
+v

# 2018-04-04 11:16:01.190268
+print('hello {}'.format(__file__))
+
+def hello(msg):
+    print('hello {}'.format(__file__))
+    return True

# 2018-04-04 11:16:14.962518
+hello('abc')

# 2018-04-04 11:16:53.282773
+def hello(msg=''):
+    """Takes a message and prints it"""
+    print("Echo: {}".format(msg))

# 2018-04-04 11:17:09.048413
+hello()

# 2018-04-04 11:17:15.440392
+hello('some message')

# 2018-04-04 13:44:06.797043
+from common.models import *

# 2018-04-04 13:46:03.926214
+Branches.get(Branches.branch == 362 )

# 2018-04-04 13:46:14.124472
+BrokersBranches.get(Branches.branch == 362 )

# 2018-04-04 13:46:22.818197
+BrokersBranches.get(BrokersBranches.branch == 362 )

# 2018-04-04 13:46:41.025992
+branch = BrokersBranches.get(BrokersBranches.branch == 362 )

# 2018-04-04 13:46:45.576772
+branch.brokers

# 2018-04-04 13:47:08.001034
+for broker in branch.brokers:
+    print(broker.name)

# 2018-04-04 13:47:45.198552
+broker.group.name

# 2018-04-04 13:48:03.926170
+branch.groupe.name

# 2018-04-04 13:48:07.654253
+branch.group.name

# 2018-04-04 13:51:10.764354
+branch._meta

# 2018-04-04 13:51:22.448284
+branch._meta.fields

# 2018-04-04 13:54:01.871968
+Accounts.scenarios = True/False

# 2018-04-04 13:54:17.166301
+# Accounts.scenarios = True/False

# 2018-04-04 14:09:00.604681
+v

# 2018-04-04 14:12:02.668777
+import config

# 2018-04-04 14:12:04.964574
+config

# 2018-04-04 14:12:15.268853
+repl

# 2018-04-04 14:12:27.724435
+PythonRepl

# 2018-04-04 14:15:27.332977
+def hello(msg):
+    print(msg)

# 2018-04-04 14:15:34.996080
+hello('Tom')

# 2018-04-04 14:17:45.991609
+def hello(msh):
+    pass

# 2018-04-04 14:18:18.421672
+def hello(msg):
+    return "Some variation"

# 2018-04-04 14:18:39.381112
+def hello(msh):
+    return "123"

# 2018-04-04 14:20:19.945460
+def abc(msg):
+    return "123"

# 2018-04-04 14:21:11.775614
+def abc(msh):
+    return "abcde"

# 2018-04-04 14:21:58.677920
+def abc(msg=""):
+    return msg.upper()

# 2018-04-05 16:12:31.081808
+def mynameis(john):
+    print(john)

# 2018-04-23 14:04:34.694401
+import myModule

# 2018-05-07 14:09:35.037943
+uuid1 = "03FCE2EA432A4FF4A6E5A55692FE1293"

# 2018-05-07 14:09:42.312196
+uuid2 = "5092nkzmqeoxxzly5axiropy4xwvdrjg"

# 2018-05-07 14:09:49.368272
+len(uuid1)

# 2018-05-07 14:09:52.544182
+len(uuid2)

# 2018-05-15 16:20:38.083409
+hash('abc')

# 2018-05-15 16:20:42.334941
+hash('abc', 'def')

# 2018-05-15 16:20:45.993556
+hash('abc' + 'def')

# 2018-05-15 16:21:16.192133
+a1 = [1,2,3,4]

# 2018-05-15 16:21:21.392347
+str(a1)

# 2018-05-15 16:24:37.041271
+haslib.md5('abc')

# 2018-05-15 16:24:42.263573
+hashlib.md5('abc')

# 2018-05-15 16:24:46.463678
+import hashlib

# 2018-05-15 16:25:07.296711
+hashlib.md5('abc')

# 2018-05-15 16:25:12.047235
+hashlib.md5(b'abc')

# 2018-05-15 16:25:46.614566
+hashlib.md5(u'abc')

# 2018-05-15 16:26:12.853925
+hashlib.md5(b'abc').digest().encode('base64')

# 2018-05-15 16:26:28.612471
+hashlib.md5(b'abc').digest()

# 2018-05-15 16:26:33.573159
+hashlib.md5(b'abc').digest().encode()

# 2018-05-15 16:27:10.244819
+str(hashlib.md5(b'abc').digest().encode())

# 2018-05-15 16:27:15.826615
+str(hashlib.md5(b'abc').digest())

# 2018-05-15 16:28:35.836872
+hashlib.md5(b'abc').hexdigest()

# 2018-05-15 16:29:00.851619
+hashlib.md5('abc'.encode('utf-8')).hexdigest()

# 2018-05-15 16:29:26.363003
+hashlib.md5('abcdef'.encode('utf-8')).hexdigest()

# 2018-05-15 16:29:39.904876
+hashlib.md5('abcdef'.encode('utf-8')).hexdigest().encode('base64')

# 2018-05-15 16:30:12.868621
+hash = hashlib.md5('abcdef'.encode('utf-8')).hexdigest().encode('base64')

# 2018-05-15 16:30:17.715260
+hash = hashlib.md5('abcdef'.encode('utf-8')).hexdigest()

# 2018-05-15 16:30:19.314962
+hash

# 2018-05-15 16:30:32.954626
+import base64

# 2018-05-15 16:30:39.476086
+base64.encode(hash)

# 2018-05-15 16:31:26.606774
+base64.encode(hash.encode('utf-8'))

# 2018-05-15 16:32:32.667559
+help(base64)

# 2018-05-15 16:32:42.641571
+base64.urlsafe_b64encode('abc')

# 2018-05-15 16:32:48.125550
+base64.urlsafe_b64encode(b'abc')

# 2018-05-15 16:33:01.333357
+base64.urlsafe_b64encode('abc'.encode('utf-8'))

# 2018-05-15 16:33:11.334231
+base64.urlsafe_b64encode('abc'.encode(hash))

# 2018-05-15 16:33:13.940608
+hash

# 2018-05-15 16:33:31.044023
+base64.urlsafe_b64encode(hash.encode('utf-8'))

# 2018-05-15 16:33:56.242480
+base64.urlsafe_b64encode(hash)

# 2018-05-15 16:34:20.772154
+base64.b64encode(hash)

# 2018-05-15 16:34:48.178045
+base64.encodestring('abc')

# 2018-05-15 16:34:59.821797
+base64.encodestring(b'abc')

# 2018-05-15 16:35:06.672595
+base64.encodestring(b'abcdef')

# 2018-05-15 16:37:06.977604
+hs = hashlib.md5('abcdef'.encode('utf-8')).digest()

# 2018-05-15 16:37:08.283452
+hs

# 2018-05-15 16:38:37.040784
+has

# 2018-05-15 16:38:38.503868
+hash

# 2018-05-15 16:38:43.999703
+len(hash)

# 2018-05-15 16:40:00.773465
+help(md5)

# 2018-05-15 16:40:20.583942
+help(hashlib.md5)

# 2018-05-15 16:41:24.982814
+help(hashlib)

# 2018-05-15 16:44:45.126520
+"""
+unsigned int DJBHash(const char* str, unsigned int length)
+{
+   unsigned int hash = 5381;
+   unsigned int i    = 0;
+
+   for (i = 0; i < length; ++str, ++i)
+   {
+      hash = ((hash << 5) + hash) + (*str);
+   }
+
+   return hash;
+}
+"""

# 2018-05-17 16:50:55.583653
+num = 2343

# 2018-05-17 16:51:02.337395
+num << 10

# 2018-05-17 16:51:09.783105
+num << 5

# 2018-05-17 16:51:16.550764
+num << 10

# 2018-05-17 16:52:17.916163
+1 << 31

# 2018-05-17 16:52:23.676078
+1 << 64

# 2018-05-17 16:52:27.891959
+1 << 65

# 2018-05-17 16:52:46.857938
+2 << 1

# 2018-05-17 16:52:49.731291
+4 << 1

# 2018-05-17 16:52:58.458821
+4 >> 1

# 2018-05-17 16:53:03.746508
+1 >> 1

# 2018-05-17 16:53:06.842364
+0 >> 1

# 2018-05-17 16:53:32.817430
+a =10

# 2018-05-17 16:53:34.913424
+b =20

# 2018-05-17 16:53:40.521046
+a ^= b

# 2018-05-17 16:53:41.550259
+a

# 2018-05-17 16:53:44.577268
+b

# 2018-05-17 16:57:05.423373
+10 >> 1

# 2018-05-17 16:57:11.497133
+5 >> 1

# 2018-05-17 16:57:13.994958
+2 >> 1

# 2018-05-17 16:57:18.512192
+1 >> 1

# 2018-05-22 15:20:46.612484
+class myclass(object): pass

# 2018-05-22 15:20:56.237136
+print(myclass)

# 2018-05-22 15:21:42.643070
+mc = myclass

# 2018-05-22 15:21:46.356102
+mc()

# 2018-05-22 15:30:12.096084
+exit

# 2018-05-22 15:43:22.721994
+mylist = [x for x in range(10,20)]

# 2018-05-22 15:43:27.080282
+mylist

# 2018-05-22 15:43:33.161866
+mylist = [x for x in range(10,21)]

# 2018-05-22 15:43:34.538922
+mylist

# 2018-05-22 15:43:52.656899
+mylist = [x*82 for x in range(10,21)]

# 2018-05-22 15:44:00.503963
+mylist = [x**2 for x in range(10,21)]

# 2018-05-22 15:44:03.224675
+mylist

# 2018-05-22 15:44:09.352391
+mylist = [x**2 for x in range(1,21)]

# 2018-05-22 15:44:11.808381
+mylist

# 2018-05-22 15:44:31.052496
+mylist = [x^2 for x in range(1,21)]

# 2018-05-22 15:44:34.152451
+mylist

# 2018-05-22 15:45:02.558590
+mylist = [x**2 for x in range(1,21)]

# 2018-05-22 15:45:11.006971
+mylist

# 2018-05-22 15:45:33.619673
+mylist2 = [x for x in range(1,21)]

# 2018-05-22 15:45:39.590134
+mylist2

# 2018-05-22 15:46:00.268264
+mylist = [(x*2)**2 for x in range(1,21)]

# 2018-05-22 15:46:02.637147
+mylist

# 2018-05-22 15:46:53.096308
+mylist = [x**2 for x in range(10)]

# 2018-05-22 15:46:54.963264
+mylist

# 2018-05-22 15:47:11.768948
+mylist2 = [x for x in range(10)]

# 2018-05-22 15:47:13.912488
+mylist2

# 2018-05-22 15:48:18.645508
+mylist3 = [i for i in mylist if i%2 == 0]

# 2018-05-22 15:48:21.525293
+mylist3

# 2018-05-22 15:50:54.520187
+mympa = map(lambda x: x*2, mylist)

# 2018-05-22 15:50:57.234210
+mumpa

# 2018-05-22 15:50:59.655578
+mylist

# 2018-05-22 15:51:03.232542
+mympa

# 2018-05-22 15:51:14.071828
+list(mympa)

# 2018-05-22 15:51:57.220889
+def runme(x):
+    return x+10

# 2018-05-22 15:52:24.396961
+mymap2 = map( runme, mylist)

# 2018-05-22 15:52:29.324656
+list(mymap2)

# 2018-05-22 15:52:35.259391
+mylist

# 2018-05-22 15:53:46.250152
+even = filter(lambda x: x%2 == 0, mylist)

# 2018-05-22 15:53:47.848201
+even

# 2018-05-22 15:53:52.424735
+list(even)

# 2018-05-22 15:54:09.984974
+oddn = filter(lambda x: x%2, mylist)

# 2018-05-22 15:54:15.232830
+list(oddn)

# 2018-05-22 15:55:17.725629
+sum(mylist)

# 2018-05-22 15:56:05.195604
+min(mylist)

# 2018-05-22 15:56:09.083269
+max(mylist)

# 2018-05-22 15:56:45.635447
+all(mylist)

# 2018-05-22 15:57:01.529172
+any(mylist)

# 2018-05-22 15:57:42.520425
+std(mylist)

# 2018-05-22 16:00:41.818088
+mylistmap = [(x, x**2) for x in range(10)]

# 2018-05-22 16:00:45.842955
+mylistmap

# 2018-05-22 16:02:15.973180
+mydict = {'a': 10, 'b':20}

# 2018-05-22 16:02:20.013152
+mydict.items()

# 2018-05-22 16:02:30.173062
+list(mydict.items())

# 2018-05-31 15:19:47.397625
+import random

# 2018-05-31 15:19:56.572840
+item = [1,2,3]

# 2018-05-31 15:20:19.495072
+randome.randrange(0, len(item),1)

# 2018-05-31 15:20:26.175437
+random.randrange(0, len(item),1)

# 2018-05-31 15:20:43.259211
+item[2]
